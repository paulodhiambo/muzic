package com.ldt.musicr.fragments;


import android.app.Activity;
import android.content.ContentResolver;
import android.content.res.ColorStateList;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.RippleDrawable;
import android.os.AsyncTask;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.AppCompatSpinner;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;

import android.net.Uri;
import android.provider.MediaStore;

import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;

import android.os.Bundle;
import android.support.v7.widget.GridLayoutManager;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.LinearSnapHelper;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.SnapHelper;

import android.util.Log;

import android.view.LayoutInflater;

import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;


import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.BaseAdapter;
import android.widget.FrameLayout;
import android.widget.ImageView;

import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import FeaturePlaylistAdapter;
import SongAdapter;
import com.ldt.musicr.util.BitmapEditor;
import com.ldt.musicr.util.Tool;

import com.ldt.musicr.R;

import com.ldt.musicr.ui.BaseActivity;
import com.ldt.musicr.ui.main.SupportFragmentPlusActivity;
import com.ldt.musicr.loader.PlaylistLoader;
import com.ldt.musicr.loader.SongLoader;
import com.ldt.musicr.services.MusicStateListener;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;


import com.ldt.musicr.ui.widget.bubblepopupmenu.BubbleMenuCenter;

import butterknife.BindView;
import butterknife.ButterKnife;
import me.everything.android.ui.overscroll.OverScrollDecoratorHelper;

public class MainScreenFragment extends FragmentPlus implements MusicStateListener {

    private static final String TAG = "MainScreenFragment";
    private static final int MY_PERMISSIONS_READ_STORAGE = 1;

    @BindView(R.id.baihat) TextView baiHat;

    @BindView(R.id.recyclerView_N1) RecyclerView songListRecyclerView;
    @BindView(R.id.recycler_view) RecyclerView playlistRecyclerView;
    @BindView(R.id.choosePlaylist_listView) ListView playlist_BigList;


    @BindView(R.id.songs_piece_header_relative) View songs_pieces_relative_header;
    @BindView(R.id.header_panel) View playlist_pieces_relative;
    @BindView(R.id.main_slider) View main_slider;

    @BindView(R.id.count) TextView count_playlist;
    @BindView(R.id.songs_count) TextView count_song;
    @BindView(R.id.more) TextView see_all_playlist;
    @BindView(R.id.song_see_all) TextView see_all_song;


    @BindView(R.id.status_bar) View mStatusBar;

    @BindView(R.id.spinner) AppCompatSpinner mSpinner;


    public static RippleDrawable getPressedColorRippleDrawable(int normalColor, int pressedColor)
    {
        return new RippleDrawable(getPressedColorSelector(normalColor, pressedColor), getColorDrawableFromColor(normalColor), null);
    }

    public static ColorStateList getPressedColorSelector(int normalColor, int pressedColor)
    {
        return new ColorStateList(
                new int[][]
                        {
                                new int[]{android.R.attr.state_pressed},
                                new int[]{android.R.attr.state_focused},
                                new int[]{android.R.attr.state_activated},
                                new int[]{}
                        },
                new int[]
                        {
                                pressedColor,
                                pressedColor,
                                pressedColor,
                                normalColor
                        }
        );
    }

    public static ColorDrawable getColorDrawableFromColor(int color)
    {
        return new ColorDrawable(color);
    }

    private void SetAllClick() {
        View[] views = new View[]
                {  // put views here
                        baiHat,
                        songs_pieces_relative_header
              //          titleBar,
                    //    searchButton
                };
        setOnClick(Onclick, views);
    }
    private void setOnClick(View.OnClickListener onclick, View[] v) {
        int len = v.length;
        for (int i = 0; i < len; i++)
            v[i].setOnClickListener(onclick);
    }

    private View.OnClickListener Onclick = new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            switch (v.getId()) {
                case R.id.baihat:

                case R.id.songs_piece_header_relative:
                    ((SupportFragmentPlusActivity) getActivity()).pushFragment(ShowMusicSongs.Initialize(getActivity()), true);
                    break;

            }
        }
    };


    @Override
    public ApplyMargin IWantApplyMargin() {
        return ApplyMargin.BOTH;
    }

    @Override
    public void applyFitWindow_Bottom()
    {
        FrameLayout.LayoutParams params = (FrameLayout.LayoutParams)playlist_BigList.getLayoutParams();
        params.bottomMargin = FitWindow_Bottom;
        playlist_BigList.setLayoutParams(params);
        Log.d("SFA","MainScreen received command : "+ FitWindow_Bottom);
    }

    public static MainScreenFragment Initialize(Activity activity) {

        MainScreenFragment mainScreenFragment = new MainScreenFragment();
        mainScreenFragment.setFrameLayoutNTransitionType(activity, SupportFragmentPlusActivity.TransitionType.FADE_IN_OUT);
        return mainScreenFragment;
    }
    private boolean initted = false;

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_main_screen,container,false);
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        rootView = view;
        ButterKnife.bind(this,rootView);

        ArrayAdapter<String> adapter = new ArrayAdapter(getActivity(), R.layout.item_spinner_main_screen, Arrays.asList(getContext().getResources().getStringArray(R.array.spinner_main_screen_array)));
        adapter.setDropDownViewResource(R.layout.item_spinner_main_screen_inside);
        mSpinner.setAdapter(adapter);
        mSpinner.setSelection(0);

        mSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
                Toast.makeText(getActivity(), mSpinner.getSelectedItem().toString(), Toast.LENGTH_SHORT).show();
            }

            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {

            }
        });

        addToBeRipple(R.drawable.ripple_effect,songs_pieces_relative_header,playlist_pieces_relative);
        SetAllClick();
        GetListMusic();
        ((BaseActivity)getActivity()).setMusicStateListenerListener(this);
        initted = true;
    }

    private void GetListMusic() {
          if (ContextCompat.checkSelfPermission(getActivity(), android.Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {

            if (ActivityCompat.shouldShowRequestPermissionRationale(getActivity(), android.Manifest.permission.READ_EXTERNAL_STORAGE)) {
                ActivityCompat.requestPermissions(getActivity(), new String[]{android.Manifest.permission.READ_EXTERNAL_STORAGE
                }, MY_PERMISSIONS_READ_STORAGE);

            } else {

                ActivityCompat.requestPermissions(getActivity(),
                        new String[]{
                                android.Manifest.permission.READ_EXTERNAL_STORAGE
                        },
                        MY_PERMISSIONS_READ_STORAGE);

            }
        } else doStuff();
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResult) {
        switch (requestCode) {
            case MY_PERMISSIONS_READ_STORAGE: {
                if (grantResult.length > 0 && grantResult[0] == PackageManager.PERMISSION_GRANTED) {
                    if (ContextCompat.checkSelfPermission(getActivity(), android.Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) {
                        // Granted
                        doStuff();
                    } else getActivity().finish();
                }
            }
            return;
        }
    }


    private void doStuff() {
        new loadPlaylists().execute();
        new loadSongs().execute();
        onTransitionComplete();
    }
    private boolean drawn =false;
    @Override
    public void onTransitionComplete() {
        if(!drawn) {
            drawn = true;
            Tool.setDrawn(drawn);
            getActivity().findViewById(R.id.rootEveryThing).setVisibility(View.VISIBLE);
        }
    }

    @Override
    public StatusTheme setDefaultStatusTheme() {
        return StatusTheme.BlackIcon;
    }


    @Override
    public void applyFitWindow_Top() {
        if(mStatusBar!=null) {
            ViewGroup.LayoutParams params = mStatusBar.getLayoutParams();
            params.height = getFitWindow_Top();
            mStatusBar.requestLayout();
        }
    }

    @Override
    public void restartLoader() {

    }

    @Override
    public void onPlaylistChanged() {

    }

    @Override
    public void onMetaChanged() {

            if(mSongsListAdapter!=null) {

                mSongsListAdapter.arraylist = SongLoader.getAllSongs(getActivity());
            count_song.setText(String.valueOf(mSongsListAdapter.arraylist.size()));
                mSongsListAdapter.notifyDataSetChanged();
            }
        if(mPlaylistAdapter!=null) {
                mPlaylistAdapter.setData(PlaylistLoader.getPlaylists(getActivity(),true));
                count_playlist.setText(String.valueOf( mPlaylistAdapter.getItemCount()));
                mPlaylistAdapter.notifyDataSetChanged();
        }
    }



    @Override
    public void onArtWorkChanged() {
    if(!initted) return;

        int c = Tool.getSurfaceColor();
        applyRippleColor(c);
        main_slider.setBackgroundColor(Color.argb(150,Color.red(c),Color.green(c),Color.blue(c)));

        count_song.setTextColor(c);
        count_playlist.setTextColor(c);
        if(mSongsListAdapter!=null) {
            mSongsListAdapter.notifyDataSetChanged();
        }

    }

    public int color24bit = 255 << 16 | 255 << 8 | 255;


    public static void setWindowFlag(Activity activity, final int bits, boolean on) {
        Window win = activity.getWindow();
        WindowManager.LayoutParams winParams = win.getAttributes();
        if (on) {
            winParams.flags |= bits;
        } else {
            winParams.flags &= ~bits;
        }
        win.setAttributes(winParams);
    }



    private PlaylistRecyclerViewAdapter mPlaylistAdapter;
    private SongRecyclerAdapter mSongsListAdapter;
    private class loadPlaylists extends  AsyncTask<String, Void, String> {
        @Override
        protected String doInBackground(String... params) {

            return "Executed";
        }
        @Override
        protected void onPostExecute(String result){


            if(getActivity()!=null) {
                GridLayoutManager gridLayoutManager = new GridLayoutManager(getActivity(),1,LinearLayoutManager.HORIZONTAL,false);
                playlistRecyclerView.setLayoutManager(gridLayoutManager);
                OverScrollDecoratorHelper.setUpOverScroll(playlistRecyclerView,OverScrollDecoratorHelper.ORIENTATION_HORIZONTAL);
            //    SnapHelper snapHelper = new LinearSnapHelper();
              //  snapHelper.attachToRecyclerView(playlistRecyclerView);
            }
        }
    }
    private boolean showAuto = true;
    private class loadSongs extends AsyncTask<String, Void, String> {

        @Override
        protected String doInBackground(String... params) {
            if (getActivity() != null)
                mSongsListAdapter = new SongRecyclerAdapter((AppCompatActivity) getActivity(), false, false);
            return "Executed";
        }

        @Override
        protected void onPostExecute(String result) {
            songListRecyclerView.setAdapter(mSongsListAdapter);
            if (getActivity() != null) {
                GridLayoutManager gridLayoutManager = new GridLayoutManager(getActivity(), 6, LinearLayoutManager.HORIZONTAL, false);
               songListRecyclerView.setLayoutManager(gridLayoutManager);
                OverScrollDecoratorHelper.setUpOverScroll(songListRecyclerView,OverScrollDecoratorHelper.ORIENTATION_HORIZONTAL);
                SnapHelper snapHelper = new LinearSnapHelper();
                snapHelper.attachToRecyclerView(songListRecyclerView);


            }
        }

    }
    String[] long_press_menu_random_string = new String[] {"Play","Add","More"};
    int[] long_press_menu_random_image_id = new int[] {R.drawable.play,R.drawable.back,R.drawable.more_black};
    public BubbleMenuCenter.BubbleMenuViewListener bubbleMenuViewListener = new BubbleMenuCenter.BubbleMenuViewListener() {
        @Override
        public ImageView getImageView(String command) {
            return null;
        }

        @Override
        public String[] getStringCommand(String command) {
            return long_press_menu_random_string;
        }

        @Override
        public int[] getImageResources(String command) {
            return long_press_menu_random_image_id;
        }

        @Override
        public void onReturnResult(String command, int result) {
            Tool.showToast(getActivity(),getStringCommand(command)[result],500);
        }
    };


    public ArrayList<Album> albumArrayList = new ArrayList<>();

    public class myTag {
        int Position;

        public myTag(int id_pos) {
            Position = id_pos;
        }
    }

    private class album_view_adapter extends BaseAdapter {
        @Override
        public int getCount() {
            return albumArrayList.size();
        }

        @Override
        public Object getItem(int position) {
            return null;
        }

        @Override
        public long getItemId(int position) {
            return position;
        }

        @Override
        public View getView(final int position, View view, ViewGroup parent) {
            view = getActivity().getLayoutInflater().inflate(R.layout.item_songs_list, parent, false);
            final ImageView imageView =  view.findViewById(R.id.item_album_view_image);
            TextView titleView =  view.findViewById(R.id.item_album_view_title);
            TextView artistView = view.findViewById(R.id.item_album_view_aritst);
            final Album album = albumArrayList.get(position);
            imageView.setTag(new myTag(position));

            imageView.setImageBitmap(BitmapEditor.GetRoundedBitmapWithBlurShadow(getActivity(), BitmapEditor.getRoundedCornerBitmap(album.getBitmap(), 15), 25, 25, 25, 25, -6, 180, 12, 2));
            imageView.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    Tool.showToast(getActivity(), "You click on this ImageView!", 1000);

                }
            });
            imageView.setOnLongClickListener(new View.OnLongClickListener() {
                @Override
                public boolean onLongClick(View v) {
                    ImageView iv = (ImageView) v;
                    Tool.showToast(getActivity(), "You long click on this ImageView!", 1000);
                    return true;
                }
            });
            titleView.setText(album.getTitle());
            artistView.setText(album.getArtist());
            Log.d("Vision ", "ListView getView!");
            return view;
        }
    }

     class MyBounceInterpolator implements android.view.animation.Interpolator {
        private double mAmplitude = 1;
        private double mFrequency = 10;

        MyBounceInterpolator(double amplitude, double frequency) {
            mAmplitude = amplitude;
            mFrequency = frequency;
        }

        public float getInterpolation(float time) {
            return (float) (-1 * Math.pow(Math.E, -time / mAmplitude) *
                    Math.cos(mFrequency * time) + 1);
        }
    }

    private void getAlbumList_AfterAskedPermission() {
        ContentResolver contentR = getActivity().getContentResolver();
        Uri album = MediaStore.Audio.Albums.EXTERNAL_CONTENT_URI;
        Cursor albumCursor = contentR.query(album, null, null, null, null);
        if (albumCursor != null && albumCursor.moveToFirst()) { // có chạy vòng đầu tiên hay không.
            albumArrayList.clear();  // Xóa hết phần tử cái đã.
            int art = albumCursor.getColumnIndex(MediaStore.Audio.Albums.ALBUM_ART);
            int title = albumCursor.getColumnIndex(MediaStore.Audio.Albums.ALBUM);
            int artist = albumCursor.getColumnIndex(MediaStore.Audio.Albums.ARTIST);

            do {
                String art_path, title_text, artist_text;
                art_path = albumCursor.getString(art);
                title_text = albumCursor.getString(title);
                artist_text = albumCursor.getString(artist);
                Bitmap bitmap = BitmapFactory.decodeFile(art_path);
                if (bitmap == null) // khong ton tai art
                {
                    Bitmap bitmap1 = BitmapFactory.decodeResource(getResources(), R.drawable.default_image2);
                    if (BitmapEditor.TrueIfBitmapBigger(bitmap1, 300)) {
                        Log.d("Song", "bigger");
                        bitmap = BitmapEditor.getResizedBitmap(bitmap1, 300, 300);
                        bitmap1.recycle();
                    } else bitmap = bitmap1;
                }
                albumArrayList.add(new Album(title_text, artist_text, bitmap));
            }
            while (albumCursor.moveToNext());
        }
        Collections.sort(albumArrayList, new Comparator<Album>() {
            public int compare(Album a, Album b) {
                return a.getTitle().compareTo(b.getTitle());
            }
        });
    }
}
